//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ShoesAppData
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DataProductsEntities : DbContext
    {
        public DataProductsEntities()
            : base("name=DataProductsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CatBrand> CatBrands { get; set; }
        public virtual DbSet<CatCatalog> CatCatalogs { get; set; }
        public virtual DbSet<CatColor> CatColors { get; set; }
        public virtual DbSet<CatProvider> CatProviders { get; set; }
        public virtual DbSet<CatRating> CatRatings { get; set; }
        public virtual DbSet<CatSize> CatSizes { get; set; }
        public virtual DbSet<CatTypeDetail> CatTypeDetails { get; set; }
        public virtual DbSet<CatTypeProduct> CatTypeProducts { get; set; }
        public virtual DbSet<Comment> Comments { get; set; }
        public virtual DbSet<database_firewall_rules> database_firewall_rules { get; set; }
        public virtual DbSet<database_firewall_rules1> database_firewall_rules1 { get; set; }
        public virtual DbSet<DetailProduct> DetailProducts { get; set; }
        public virtual DbSet<ImagesProduct> ImagesProducts { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Qualification> Qualifications { get; set; }
        public virtual DbSet<SimilarProduct> SimilarProducts { get; set; }
        public virtual DbSet<SizeForProduct> SizeForProducts { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<database_firewall_rules2> database_firewall_rules2 { get; set; }
    
        public virtual int ACOB_DeleteProd(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ACOB_DeleteProd", iDParameter);
        }
    
        public virtual ObjectResult<ACOB_GetColors_Result> ACOB_GetColors()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ACOB_GetColors_Result>("ACOB_GetColors");
        }
    
        public virtual ObjectResult<ACOB_GetImages_Result> ACOB_GetImages(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ACOB_GetImages_Result>("ACOB_GetImages", idParameter);
        }
    
        public virtual ObjectResult<ACOB_GetSizes_Result> ACOB_GetSizes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ACOB_GetSizes_Result>("ACOB_GetSizes");
        }
    
        public virtual int ACOB_InsertColor(string name, string desc, string hexa, Nullable<bool> isEn)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            var hexaParameter = hexa != null ?
                new ObjectParameter("hexa", hexa) :
                new ObjectParameter("hexa", typeof(string));
    
            var isEnParameter = isEn.HasValue ?
                new ObjectParameter("isEn", isEn) :
                new ObjectParameter("isEn", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ACOB_InsertColor", nameParameter, descParameter, hexaParameter, isEnParameter);
        }
    
        public virtual int ACOB_InsertImages(Nullable<int> idProduct, string descripcion, byte[] image, Nullable<System.DateTime> dateUpdate, Nullable<bool> isEnable)
        {
            var idProductParameter = idProduct.HasValue ?
                new ObjectParameter("idProduct", idProduct) :
                new ObjectParameter("idProduct", typeof(int));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(byte[]));
    
            var dateUpdateParameter = dateUpdate.HasValue ?
                new ObjectParameter("DateUpdate", dateUpdate) :
                new ObjectParameter("DateUpdate", typeof(System.DateTime));
    
            var isEnableParameter = isEnable.HasValue ?
                new ObjectParameter("IsEnable", isEnable) :
                new ObjectParameter("IsEnable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ACOB_InsertImages", idProductParameter, descripcionParameter, imageParameter, dateUpdateParameter, isEnableParameter);
        }
    
        public virtual int ACOB_InsertProduct(Nullable<int> idType, Nullable<int> idColor, Nullable<int> idBrand, Nullable<int> idProvider, Nullable<int> idCatalog, string title, string nombre, string description, string observations, Nullable<decimal> priceDistributor, Nullable<decimal> priceClient, Nullable<decimal> priceMember, Nullable<bool> isEnabled, string keywords, Nullable<System.DateTime> dateUpdate)
        {
            var idTypeParameter = idType.HasValue ?
                new ObjectParameter("IdType", idType) :
                new ObjectParameter("IdType", typeof(int));
    
            var idColorParameter = idColor.HasValue ?
                new ObjectParameter("IdColor", idColor) :
                new ObjectParameter("IdColor", typeof(int));
    
            var idBrandParameter = idBrand.HasValue ?
                new ObjectParameter("IdBrand", idBrand) :
                new ObjectParameter("IdBrand", typeof(int));
    
            var idProviderParameter = idProvider.HasValue ?
                new ObjectParameter("IdProvider", idProvider) :
                new ObjectParameter("IdProvider", typeof(int));
    
            var idCatalogParameter = idCatalog.HasValue ?
                new ObjectParameter("IdCatalog", idCatalog) :
                new ObjectParameter("IdCatalog", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var observationsParameter = observations != null ?
                new ObjectParameter("Observations", observations) :
                new ObjectParameter("Observations", typeof(string));
    
            var priceDistributorParameter = priceDistributor.HasValue ?
                new ObjectParameter("PriceDistributor", priceDistributor) :
                new ObjectParameter("PriceDistributor", typeof(decimal));
    
            var priceClientParameter = priceClient.HasValue ?
                new ObjectParameter("PriceClient", priceClient) :
                new ObjectParameter("PriceClient", typeof(decimal));
    
            var priceMemberParameter = priceMember.HasValue ?
                new ObjectParameter("PriceMember", priceMember) :
                new ObjectParameter("PriceMember", typeof(decimal));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var keywordsParameter = keywords != null ?
                new ObjectParameter("Keywords", keywords) :
                new ObjectParameter("Keywords", typeof(string));
    
            var dateUpdateParameter = dateUpdate.HasValue ?
                new ObjectParameter("DateUpdate", dateUpdate) :
                new ObjectParameter("DateUpdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ACOB_InsertProduct", idTypeParameter, idColorParameter, idBrandParameter, idProviderParameter, idCatalogParameter, titleParameter, nombreParameter, descriptionParameter, observationsParameter, priceDistributorParameter, priceClientParameter, priceMemberParameter, isEnabledParameter, keywordsParameter, dateUpdateParameter);
        }
    
        public virtual int ACOB_InsertSize(Nullable<int> idType, string code, string unity, string desc, string value)
        {
            var idTypeParameter = idType.HasValue ?
                new ObjectParameter("IdType", idType) :
                new ObjectParameter("IdType", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var unityParameter = unity != null ?
                new ObjectParameter("Unity", unity) :
                new ObjectParameter("Unity", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ACOB_InsertSize", idTypeParameter, codeParameter, unityParameter, descParameter, valueParameter);
        }
    
        public virtual ObjectResult<ACOB_SearchByIdOrName_Result> ACOB_SearchByIdOrName(Nullable<int> id, string nombre)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ACOB_SearchByIdOrName_Result>("ACOB_SearchByIdOrName", idParameter, nombreParameter);
        }
    
        public virtual int ACOB_UpdateProduct(Nullable<int> id, Nullable<int> idType, Nullable<int> idColor, Nullable<int> idBrand, Nullable<int> idProvider, Nullable<int> idCatalog, string title, string nombre, string description, string observations, Nullable<decimal> priceDistributor, Nullable<decimal> priceClient, Nullable<decimal> priceMember, Nullable<bool> isEnabled, string keywords, Nullable<System.DateTime> dateUpdate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var idTypeParameter = idType.HasValue ?
                new ObjectParameter("IdType", idType) :
                new ObjectParameter("IdType", typeof(int));
    
            var idColorParameter = idColor.HasValue ?
                new ObjectParameter("IdColor", idColor) :
                new ObjectParameter("IdColor", typeof(int));
    
            var idBrandParameter = idBrand.HasValue ?
                new ObjectParameter("IdBrand", idBrand) :
                new ObjectParameter("IdBrand", typeof(int));
    
            var idProviderParameter = idProvider.HasValue ?
                new ObjectParameter("IdProvider", idProvider) :
                new ObjectParameter("IdProvider", typeof(int));
    
            var idCatalogParameter = idCatalog.HasValue ?
                new ObjectParameter("IdCatalog", idCatalog) :
                new ObjectParameter("IdCatalog", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var observationsParameter = observations != null ?
                new ObjectParameter("Observations", observations) :
                new ObjectParameter("Observations", typeof(string));
    
            var priceDistributorParameter = priceDistributor.HasValue ?
                new ObjectParameter("PriceDistributor", priceDistributor) :
                new ObjectParameter("PriceDistributor", typeof(decimal));
    
            var priceClientParameter = priceClient.HasValue ?
                new ObjectParameter("PriceClient", priceClient) :
                new ObjectParameter("PriceClient", typeof(decimal));
    
            var priceMemberParameter = priceMember.HasValue ?
                new ObjectParameter("PriceMember", priceMember) :
                new ObjectParameter("PriceMember", typeof(decimal));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var keywordsParameter = keywords != null ?
                new ObjectParameter("Keywords", keywords) :
                new ObjectParameter("Keywords", typeof(string));
    
            var dateUpdateParameter = dateUpdate.HasValue ?
                new ObjectParameter("DateUpdate", dateUpdate) :
                new ObjectParameter("DateUpdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ACOB_UpdateProduct", idParameter, idTypeParameter, idColorParameter, idBrandParameter, idProviderParameter, idCatalogParameter, titleParameter, nombreParameter, descriptionParameter, observationsParameter, priceDistributorParameter, priceClientParameter, priceMemberParameter, isEnabledParameter, keywordsParameter, dateUpdateParameter);
        }
    
        public virtual ObjectResult<ACOB_GetSizeForEachProduct_Result> ACOB_GetSizeForEachProduct(Nullable<int> idProducto)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("idProducto", idProducto) :
                new ObjectParameter("idProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ACOB_GetSizeForEachProduct_Result>("ACOB_GetSizeForEachProduct", idProductoParameter);
        }
    
        public virtual int ACOB_InsertSizeProduct(Nullable<int> idProduct, Nullable<int> idSize)
        {
            var idProductParameter = idProduct.HasValue ?
                new ObjectParameter("idProduct", idProduct) :
                new ObjectParameter("idProduct", typeof(int));
    
            var idSizeParameter = idSize.HasValue ?
                new ObjectParameter("idSize", idSize) :
                new ObjectParameter("idSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ACOB_InsertSizeProduct", idProductParameter, idSizeParameter);
        }
    
        public virtual int ACOB_UpdateSizeProduct(Nullable<int> id, Nullable<int> idProduct, Nullable<int> idSize)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var idProductParameter = idProduct.HasValue ?
                new ObjectParameter("idProduct", idProduct) :
                new ObjectParameter("idProduct", typeof(int));
    
            var idSizeParameter = idSize.HasValue ?
                new ObjectParameter("idSize", idSize) :
                new ObjectParameter("idSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ACOB_UpdateSizeProduct", idParameter, idProductParameter, idSizeParameter);
        }
    }
}
